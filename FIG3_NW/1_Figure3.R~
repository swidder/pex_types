#Author Stefanie Widder 24062023

library(tidyverse)
library(ggplot2)
library(ggpubr)
library(phyloseq)
library(igraph)
library(plyr)
library(dplyr)
library(xlsx)
source("../HARMONIZE_FIGURES/1_plot_utils.R")

#########
##AUX
#########


############
# extract NW_IDs whith majority in clusterK and return only NWS with <10 iSamples
###########
get_NWs_majority<-function(maP,spl){
#find majority k
tmp<-lapply(maP, function(x,spl){table(spl[x])},spl=spl)
tmp<-lapply(tmp, function(x){x[order(-x)]})
tmp<-lapply(tmp, function(x){names(x)[1]})

#find representative (dummy) samples
rep<-array()
for (j in 1:length(tmp)){
rep[j]<-names(which(spl[maP[[j]]]==tmp[[j]]))[1]
}
names(rep)<-names(tmp)
rep
}

############
# Degree distribution on giant component
############
get.degreeGC<-function(g){
#giant
co <- components(g, mode = 'STRONG')
tmp<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
#centrality
b<-degree(tmp)
#join to vertex array 
d<-setNames(array(rep(NA,vcount(g))),V(g)$name)
d[names(b)]<-b
d
}

#############
#Clustering coefficient on giant component
#############
get.transitivityGC<-function(g){
#giant
co <- components(g, mode = 'STRONG')
tmp<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
#centrality
b<-transitivity(tmp, type="local")
names(b)<-V(tmp)$name
#join to vertex array 
d<-setNames(array(rep(NA,vcount(g))),V(g)$name)
d[names(b)]<-b
d
}

############
#Betweenness centrality giant component
############
get.betwGC<-function(g){
#giant
co <- components(g, mode = 'STRONG')
tmp<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
#centrality
b<-betweenness(tmp,directed=F, normalize=T, weight=abs(E(tmp)$weight))

#join to vertex array 
d<-setNames(array(rep(NA,vcount(g))),V(g)$name)
d[names(b)]<-b
d
}

#########
#Vertex count on giant component
#########
vcountGC<-function(g){
co <- components(g, mode = 'STRONG')
tmp<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
#ecc
vcount(tmp)
}

##########
# edgecount giant component
##########
ecountGC<-function(g){
co <- components(g, mode = 'STRONG')
tmp<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
#ecc
ecount(tmp)
}

##############
#clustering coefficient giant component 
##############
clustCoeffGC<-function(g){
co <- components(g, mode = 'STRONG')
tmp<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
transitivity(tmp)
}

###############
###degree distribution for total graph or giant component
#on both, positive and negative edges
###############
get.degreeDistribution<-function(g,mod){
if(mod%in%"gc"){
co <- components(g, mode = 'STRONG')
g<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
}
d<-degree(g)
dd<-table(d)/sum(table(d))
df<-data.frame(dd)
df<-na.omit(df)
df<-df[df[,2]>0,]
df
}

#############
#clustering distribution log(C(k)) by log(k) for total graph or giant component
#on both, positive and negative edges
#############
get.clusteringDistribution<-function(g,mod){
if(mod%in%"gc"){
co <- components(g, mode = 'STRONG')
g<-induced.subgraph(g, which(co$membership == which.max(co$csize)))
}
d<-degree(g)
cc<-transitivity(g, type="local")
df<-data.frame(d,cc)
df<-na.omit(df)
df<-df[df[,2]>0,]
df
}

###############
#identifies ASVs with top 10% degree and lowest 10% clustering in giant component
###############
get.topPred<-function(clustL){
r<-1
targ<-list()
for (u in 1: length(clustL)){
tmp<-clustL[[u]]
p<-intersect(rownames(tmp[tmp$cc<quantile(tmp$cc ,0.9),]), rownames(tmp[tmp$d>quantile(tmp$d ,0.9),]))
if(length(p)>0){
targ[[r]]<-tmp[p,]
names(targ)[r]<-names(clustL)[u]
r<-r+1
}
}
targ
}

#################
#utility function
#################
repetor<-function(x){
out<-1
for (u in 1: length(x)){
out<-c(out,rep(names(x)[u], x[u]))
}
out<-out[-1]
out
}

#################
#utility function
#################
repetor1<-function(x, what){
if(length(what)==length(x)){
out<-1
for (u in 1: length(x)){
out<-c(out,rep(what[u], x[u]))
}
out<-out[-1]
out
}else{
NA
}
}


########
#MAIN
########

####
# LOAD DATA
####

load("../DATA_INPUT/EC880F1B.rda")
dat<-as.data.frame(sample_data(EC880))
dat<-dat[!is.na(dat$PExClust),]
#taxonomy file
TAX<-as.data.frame(tax_table(EC880))


####
#FLATTEN NW INFORMATION
#####

#find all NW directories
me<-dir("../DATA_INPUT/NWs", pattern="EC", full.names=T)
#rememeber cluster category by sample
spl<-dat$K3
names(spl)<-rownames(dat)

#intitialize dfs
TOP<-setNames(data.frame(matrix(ncol = 9, nrow = 0)), c("patient","EC", "NW_IDs", "sampleID1", "K3","D2T","ecount", "vcount","betweennessC"))
DDG<-setNames(data.frame(matrix(ncol = 7, nrow = 0)), c("patient","EC", "NW_IDs", "K3","D2T", "d", "Freq"))
CDG<-setNames(data.frame(matrix(ncol = 7, nrow = 0)), c("patient","EC", "NW_IDs", "K3","D2T", "d", "cc"))
PRED<-setNames(data.frame(matrix(ncol = 8, nrow = 0)), c("patient","EC", "NW_IDs", "K3","D2T", "d", "cc", "ASV"))

#for each time series
for (i in 1: length(me)){
#construct path to file
d<-strsplit(me[i],"/")[[1]][4]
dd<-unlist(strsplit(d, "_"))
f<-paste("NWs_",dd[1], "_patient",dd[3],".rda", sep="")
targ<-paste(me[i], "/",f, sep="")

#read NW
NW<-get(load(targ))

#remember samples used for NW inference
maP<-NW$samples

#NW classification to PExClust by sample majority
mes<-get_NWs_majority(maP,spl)

#collect NW features
nm<-names(mes)
k3<-unname(unlist((dat[unname(mes),"K3"])))

#initialize arrays
edges<-array()
nodes<-array()
clc<-array()
degdistGC<-list()
clustdistGC<-list()

#for every NW
for (h in 1: length(mes)){
g<-NW$fullNW[[h]]
edges[h]<-ecountGC(g)
nodes[h]<-vcountGC(g)
clc[h]<-clustCoeffGC(g)
degdistGC[[h]]<-get.degreeDistribution(g,"gc")
clustdistGC[[h]]<-get.clusteringDistribution(g,"gc")
}
names(edges)<-names(mes)
names(nodes)<-names(mes)

#########
# Topological NW features
TOP<-rbind(TOP, data.frame(patient=rep(NW$patient, length(mes)),EC=rep(dd[1], length(mes)) ,NW_IDs=nm,sampleID1=mes,K3=k3, D2T=as.numeric(NW$days2treat[nm]),ecount=edges, vcount=nodes,betweennessC=as.numeric(NW$betweennessC[nm])))


#####
#degree distribution (giant component)
names(degdistGC)<-names(mes)
add<-rbind.fill(degdistGC)
#remember nrow for each original data frame 
zz<-sapply(degdistGC, nrow)
DDG<-rbind(DDG,data.frame(patient=rep(NW$patient, nrow(add)),EC=rep(dd[1], nrow(add)) ,NW_IDs=repetor(zz),K3=repetor1(zz,k3), D2T= repetor1(zz,as.numeric(NW$days2treat[nm])),add))

#######
#clustering distribution (giant component)
names(clustdistGC)<-names(mes)
acd<-rbind.fill(clustdistGC)
zz<-sapply(clustdistGC, nrow)
CDG<-rbind(CDG,data.frame(patient=rep(NW$patient, nrow(acd)),EC=rep(dd[1], nrow(acd)) ,NW_IDs=repetor(zz),K3=repetor1(zz,k3), D2T= repetor1(zz,as.numeric(NW$days2treat[nm])),acd))

########
#masters in hierarchy
names(clustdistGC)<-names(mes)
tp<-get.topPred(clustdistGC)
#HERE looses names
acd<-rbind.fill(tp)
acd$ASV<-unlist(lapply(tp,rownames))
zz<-sapply(tp, nrow)
names(k3)<-names(mes)
PRED<-rbind(PRED,data.frame(patient=rep(NW$patient, nrow(acd)),EC=rep(dd[1], nrow(acd)) ,NW_IDs=repetor(zz),K3=repetor1(zz,k3[names(zz)]), D2T= repetor1(zz,as.numeric(NW$days2treat[names(zz)])),acd))

}


#Check number of NWs in K categories
#table(TOP$K3)
#AN1 AN2 PAT 
#192 175 222 


############
#PLOTTING
#######
#
#
######
#GRAPH TOPOLOGY STATS Fig3a-c
#######

#scale edge count and vcount
tmp<-TOP
tmp[,7:8]<-scale(tmp[,7:8])
tmp$K3<-factor(tmp$K3, levels=c("PAT", "AN1", "AN2"))
cfcol<-c("PAT"="#F1BB7B","AN1"="#FD6467","AN2"="#5B1A18")

comp=list(c("PAT","AN1"),c("AN1","AN2"),c("PAT","AN2"))
pA<-ggplot(tmp, aes(x=K3, y=ecount, color=K3))+geom_boxplot(outlier.shape=NA)+geom_jitter(shape=16, position=position_jitter(0.2), size=0.5,alpha=0.5)+stat_compare_means(comparisons=comp,label = "p.signif", size=4.2, label.y=c(3,3.6,4.6))+xlab("PEx types")+ylab("Edges (scaled)")+ meg_stef_theme() + guides(color=guide_legend(override.aes=list(fill=NA)))+ scale_color_manual(values=cfcol,name="PEx types",breaks=c( 'PAT','AN1', 'AN2'))+ylim(c(-1.5,5.5))+ggtitle("Node pairing")
#stat_compare_means(comparisons=comp,label = "p.format", size=3.5, label.y=c(3,3.6,4.2))

pB<-ggplot(tmp, aes(x=K3, y=vcount, color=K3))+geom_boxplot(outlier.shape=NA)+geom_jitter(shape=16, position=position_jitter(0.2), size=0.5,alpha=0.5)+stat_compare_means(comparisons=comp,label = "p.signif", size=4.2, label.y=c(3,3.6,4.6))+xlab("PEx types")+ylab("Nodes (scaled)")+ meg_stef_theme() + guides(color=guide_legend(override.aes=list(fill=NA)))+ scale_color_manual(values=cfcol,name="PEx types",breaks=c( 'PAT','AN1', 'AN2'))+ylim(c(-1.5,5.5))+ggtitle("Size")


comp=list(c("PAT","AN1"),c("AN1","AN2"),c("PAT","AN2"))
pC<-ggplot(tmp, aes(x=K3, y=betweennessC, color=K3))+geom_boxplot(outlier.shape=NA)+geom_jitter(shape=16, position=position_jitter(0.2), size=0.5,alpha=0.5)+stat_compare_means(comparisons=comp,label = "p.signif", size=4.2, label.y=c(1,1.15,1.3))+xlab("PEx types")+ylab("Betweenness centrality")+ meg_stef_theme() + guides(color=guide_legend(override.aes=list(fill=NA)))+ scale_color_manual(values=cfcol,name="PEx types",breaks=c( 'PAT','AN1', 'AN2'))+ylim(c(NA,1.5))+ggtitle("Node influence")

#LEGEND
ll<-ggplot(tmp, aes(x=K3, y=ecount, color=K3))+geom_point(alpha=0.5)+ meg_stef_theme() + guides(color=guide_legend(override.aes=list(fill=NA, size=5,shape=19)))+ scale_color_manual(values=cfcol,name="PEx types",breaks=c( 'PAT','AN1', 'AN2'))

df4<-TOP[,-c(6,1)]
write.xlsx2(df4,"source_data_figure3.xlsx",sheetName = "figure3_A-C")
df5<-CDG[,-c(5,1)]
write.xlsx2(df5,"source_data_figure3.xlsx",sheetName = "figure3_E", append=TRUE)
df6<-DDG[,-c(5,1)]
write.xlsx2(df6,"source_data_figure3.xlsx",sheetName = "figure3_D", append=TRUE)
df7<-PRED[,-c(5,1)]
write.xlsx2(df7,"source_data_figure3.xlsx",sheetName = "figure3_F", append=TRUE)
########
#DEGREE DISTRIBUTION P(k), CLUSTERING DISTRIBUTION (P(Ci))Fig3de
#######

CDG$K3<-factor(CDG$K3,levels=c("PAT","AN1", "AN2"))
DDG$K3<-factor(DDG$K3,levels=c("PAT","AN1", "AN2"))

###CLUSTERING COEFF

for (n in 1: 3){
if(n==1){
# cluster 1
me<-CDG[CDG$K3%in%"PAT",]
lab="PAT"
tit<-"Clustering distribution"
yy<-"#F1BB7B"
}
if(n==2){
#cluster 2
me<-CDG[CDG$K3%in%"AN1",]
lab="AN1"
tit<-""
yy<-"#FD6467"
}
if(n==3){
#cluster 3
me<-CDG[CDG$K3%in%"AN2",]
lab="AN2"
tit<-""
yy<-"#5B1A18"
}

p<-ggplot(me, aes(x=as.numeric(d), y=as.numeric(cc)))+geom_point(col=yy, alpha=0.5)+geom_smooth(method = "lm", se =T)+scale_x_log10(limits=c(NA,30))+scale_y_log10(limits=c(0.02,NA))+stat_regline_equation(label.y.npc = 0.15,label.x.npc = 0.02,hjust=0,size=3.2)+stat_cor(label.y.npc = 0.05,label.x.npc = 0.02,hjust=0,size=3.2, aes(label = ..r.label..))+ meg_stef_theme() +  ggtitle(tit)+xlab("k")+ylab("CC(k)")

ifelse(n==1,pE1<-p,ifelse(n==2,pE2<-p,pE3<-p))
}


#DEGREE DISTRIBUTION

for (n in 1: 3){
if(n==1){
# cluster 1
me<-DDG[DDG$K3%in%"PAT",]
lab="PAT"
tit<-"Degree distribution"
yy<-"#F1BB7B"
}
if(n==2){
#cluster 2
me<-DDG[DDG$K3%in%"AN1",]
lab="AN1"
tit<-""
yy<-"#FD6467"

}
if(n==3){
#cluster 3
me<-DDG[DDG$K3%in%"AN2",]
lab="AN2"
tit<-""
yy<-"#5B1A18"

}

p<-ggplot(me, aes(x=as.numeric(d), y=as.numeric(Freq)))+geom_point(col=yy, alpha=0.5)+geom_smooth(method = "lm", se =T)+scale_x_log10(limits=c(NA,30))+scale_y_log10(limits=c(0.015,1))+stat_regline_equation(label.y.npc = 0.95,label.x.npc = 0.02,hjust=0,size=3.2)+stat_cor(label.y.npc = 0.85,label.x.npc = 0.02,hjust=0,size=3.2, aes(label = ..r.label..))+ meg_stef_theme() + ggtitle(tit)+xlab("k")+ylab("P(k)")

ifelse(n==1,pD1<-p,ifelse(n==2,pD2<-p,pD3<-p))
}




################
#MASTER ORGANISMS IN HIERARCHY (giant component)Fig3f
#MIN 5% APPEARANCES
###########


for (n in 1: 3){
if(n==1){
# cluster 1
me<-PRED[PRED$K3%in%"PAT",]
lab="PAT"
tit<-"Drivers of hierarchy"
yy<-"#F1BB7B"
}
if(n==2){
#cluster 2
me<-PRED[PRED$K3%in%"AN1",]
lab="AN1"
tit<-""
yy<-"#FD6467"

}
if(n==3){
#cluster 3
me<-PRED[PRED$K3%in%"AN2",]
lab="AN2"
tit<-""
yy<-"#5B1A18"
}

#probability of driver seat
top<-table(me$ASV)
top<-top[order(top,decreasing=F)]
names(top)<-paste( unname(sapply(TAX[names(top),"Genus"],function(x)strsplit(x,"__")[[1]][2])),substr(names(top),1,2),sep="_")
top<-top[-(grep("NA",names(top)))]
top<-as.data.frame(top)
top$P<-top$Freq/sum(top$Freq)
#min. Prob of appearance 5%
top<-top[top$P>0.05,]
p<-ggplot(top, aes(x=Var1,y=P))+geom_bar(stat='identity',fill = yy, alpha=0.5)+ylim(c(NA,0.15))+coord_flip()+xlab("ASV")+ylab("P(ASV)")+ meg_stef_theme()+theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust=1)) + ggtitle(tit)


ifelse(n==1,pF1<-p,ifelse(n==2,pF2<-p,pF3<-p))
}


#################
###FIGURE 3
##############
#legend, PAT, AN1, AN2 in color scheme added by hand

p1<-plot_grid(pB+theme(legend.position = "none"),pA+theme(legend.position = "none"),pC+theme(legend.position = "none"), ncol=3,align = "hv",labels=c("A","B","C"),label_size = 12, label_fontface = "bold", axis="bottom")

leg<-get_legend(ll)

p23<-plot_grid(pD1+theme(legend.position = "none"),pD2+theme(legend.position = "none"),pD3+theme(legend.position = "none"),pE1+theme(legend.position = "none"),pE2+theme(legend.position = "none"),pE3+theme(legend.position = "none"), ncol=3,nrow=2, align = "hv",labels=c("D","","","E","",""),label_size = 12, label_fontface = "bold")

lp23<-plot_grid(p23,leg, ncol=2,rel_widths=c(3,1),align = "hv",labels=c("",""),label_size = 12, label_fontface = "bold")

p4<-plot_grid(pF1+theme(legend.position = "none"),pF2+theme(legend.position = "none"),pF3+theme(legend.position = "none"), ncol=3,align = "hv",labels=c("F","",""),label_size = 12, label_fontface = "bold")

f3<-plot_grid(p1,lp23,p4,ncol=1,nrow=3,align="v", rel_heights=c(1,2,1))
save_plot("figure3.pdf",f3,base_height=7.7, base_asp=1)
save_plot("figure3.png",f3,base_height=7.7, base_asp=1)

